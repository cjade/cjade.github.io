[{"content":"官方文档\n环境Mac + Docker + Redis6.0\nredis集群至少需要6个节点（3个master,3个slave）\nredis主从节点是算法分配的，无需指定，所以我们的服务名称都叫redis-master；\n1. 拉取镜像 1 docker pull redis:6.0 2. 配置文件 去下载配置文件 https://github.com/antirez/redis/blob/6.0/redis.conf\n将redis.conf复制6份，分别命名为nodes-7001.conf,nodes-7002.conf\u0026hellip;. 修改配置，以下是一个包含了最少选项的集群配置文件示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # 允许所有ip访问 #bind 127.0.0.1 # 关闭保护模式 protected-mode no # 设置运行端口 port 7001 # 开启集群功能 cluster-enabled yes # 设定了保存节点配置文件的路径， 默认值为 nodes.conf cluster-config-file nodes-7001.conf # 设置节点超时时间，单位毫秒 cluster-node-timeout 5000 # 外网ip cluster-announce-ip 192.168.3.40 # 节点映射端口 cluster-announce-port 7001 # 节点总线端 cluster-announce-bus-port 17001 #启动AOF文件 数据持久化 appendonly yes #如果要设置密码需要增加如下配置： #设置redis访问密码 requirepass redis-pw #设置集群节点间访问密码，跟上面一致 masterauth redis-pw 3. 创建容器 1 2 3 4 5 6 7 8 9 10 11 docker run -d --restart=always -p 7001:7001 -p 17001:17001 --name redis-7001 -v $PWD/nodes-7001.conf:/usr/local/cluster-redis/nodes-7001.conf redis:6.0 redis-server /usr/local/cluster-redis/nodes-7001.conf docker run -d --restart=always -p 7002:7002 -p 17002:17002 --name redis-7002 -v $PWD/nodes-7002.conf:/usr/local/cluster-redis/nodes-7002.conf redis:6.0 redis-server /usr/local/cluster-redis/nodes-7002.conf docker run -d --restart=always -p 7003:7003 -p 17003:17003 --name redis-7003 -v $PWD/nodes-7003.conf:/usr/local/cluster-redis/nodes-7003.conf redis:6.0 redis-server /usr/local/cluster-redis/nodes-7003.conf docker run -d --restart=always -p 7004:7004 -p 17004:17004 --name redis-7004 -v $PWD/nodes-7004.conf:/usr/local/cluster-redis/nodes-7004.conf redis:6.0 redis-server /usr/local/cluster-redis/nodes-7004.conf docker run -d --restart=always -p 7005:7005 -p 17005:17005 --name redis-7005 -v $PWD/nodes-7005.conf:/usr/local/cluster-redis/nodes-7005.conf redis:6.0 redis-server /usr/local/cluster-redis/nodes-7005.conf docker run -d --restart=always -p 7006:7006 -p 17006:17006 --name redis-7006 -v $PWD/nodes-7006.conf:/usr/local/cluster-redis/nodes-7006.conf redis:6.0 redis-server /usr/local/cluster-redis/nodes-7006.conf 4. 创建集群 随便进入一个容器\n1 docker exec -it redis-7001 bash 用redis-cli工具启动集群\n\u0026ndash;cluster-replicas 1 说明对于主从节点比例要求，如果设置为1，则最少需要6个节点,3主3从。 -a参数指定密码为123456,如果没有开启密码，则不需要加此参数，开启密码校验的节点，密码必须相同。\n1 redis-cli --cluster create 192.168.3.40:7001 192.168.3.40:7002 192.168.3.40:7003 192.168.3.40:7004 192.168.3.40:7005 192.168.3.40:7006 --cluster-replicas 1 ok，此时集群搭建完了。\n查看集群状态\n测试集群 使用 redis-cli -c 命令连接到集群结点，然后 set 值，set 值之后会自动重定向到 7002端口地址，然后通过 get 获取一下，获取成功证明集群有效。\nDone。\n","description":"Docker搭建Redis集群","id":0,"section":"posts","tags":["Redis","Docker"],"title":"Docker搭建Redis集群","uri":"https://week8.fun/posts/redis/docker%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4/"},{"content":"安装依赖插件 为了使vim支持ruby、lua、perl、python2、python3编写的插件，在正式编译安装vim之前需要在系统中安装好相关插件，否则编译vim会出错。\nsudo yum install ruby ruby-devel lua lua-devel luajit \\ luajit-devel ctags git python python-devel \\ python36 python36-devel tcl-devel \\ perl perl-devel perl-Extutils-ParseXS \\ perl-ExtUtils-XSpp perl-ExtUtils-CBuilder \\ perl-ExtUtils-Embed libX* ncurses-devel gtk2-devel 卸载已有vim yum -y remove vim 下载vim的项目源码 git clone https://github.com/vim/vim.git 由于国内下载GitHub项目实在是太慢了，这里分享一个加速方法，就是把GitHub的项目克隆到**码云** 然后再下载\n配置、编译、安装 进入到vim目录\n配置\n./configure --with-features=huge \\ --enable-gui=gtk2 \\ --with-x \\ --enable-fontset \\ --enable-cscope \\ --enable-multibyte \\ --enable-pythoninterp \\ --with-python-config-dir=/usr/lib64/python2.7/config \\ --enable-python3interp \\ --with-python3-config-dir=/usr/lib64/python3.6/config \\ --enable-luainterp \\ --enable-rubyinterp \\ --enable-perlinterp \\ --enable-multibyte \\ --prefix=/usr/local/vim \\ --with-compiledby=\u0026quot;jade\u0026quot; 参数说明：\n–with-features=huge： 支持最大特性\n–enable-rubyinterp： 启用Vim对ruby编写的插件的支持\n–enable-pythoninterp： 启用Vim对python编写的插件的支持\n-enable-python3interp： 启用对python3编写的插件的支持\n–enable-luainterp： 启用Vim对lua编写的插件的支持\n–enable-perlinterp： 启用Vim对perl编写的插件的支持\n–enable-multibyte： 多字节支持 可以在Vim中输入中文\n\u0026ndash;enable-fontset： 支持字体设置\n–enable-cscope： Vim对cscope支持 ，cscope是一款优秀的代码浏览工具\n–enable-gui=gtk2： gtk2支持,也可以使用gnome，表示生成gvim\n-–with-python-config-dir： 指定 python配置 路径\n\u0026ndash;with-python3-config-dir： 指定python3配置路径\n–-prefix： 编译安装路径\n\u0026ndash;with-compiledby： 编译者\n编译\nmake 如果编译错误则可能是缺少相关插件，回过头去查看上面那些插件是否都已安装上。\n安装\nmake install 设置环境变量 设置系统环境变量，把vim的bin目录添加到path中，在/etc/profile末尾添加\nsource /etc/profile或者重新打开一个终端就可以使用vim和gvim来打开文件了。下图是我安装好之后执行vim的输出截图\n# 注意/usr/local换成你的vim安装路径 export PATH=/usr/local/vim/bin:$PATH ","description":"Centos7下编译安装Vim8","id":1,"section":"posts","tags":["linux","vim","Centos"],"title":"Centos7下编译安装Vim8","uri":"https://week8.fun/posts/linux/centos7%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85vim8/"},{"content":"使用SSH登录远程服务器机需要手动输入用户名、IP、密码非常麻烦，因此可以用expect编写脚本利用脚本自动登入。\n安装expect Mac下安装 brew install expect Ubuntu下安装 apt install expect expect命令 send 用于向进程发送字符串 send命令接收一个字符串参数，并将该参数发送到进程。\nexpect 从进程接收字符串 expect命令和send命令相反，expect通常用来等待一个进程的反馈，我们根据进程的反馈，再发送对应的交互命令。\nspawn 启动新的进程 spawn命令用来启动新的进程，spawn后的send和expect命令都是和使用spawn打开的进程进行交互。\ninteract 允许用户交互 interact命令用的其实不是很多，一般情况下使用spawn、send和expect命令就可以很好的完成我们的任务；但在一些特殊场合下还是需要使用interact命令的，interact命令主要用于退出自动化，进入人工交互。比如我们使用spawn、send和expect命令完成了ftp登陆主机，执行下载文件任务，但是我们希望在文件下载结束以后，仍然可以停留在ftp命令行状态，以便手动的执行后续命令，此时使用interact命令就可以很好的完成这个任务。\n编写脚本 vim autologin.sh 添加\n#expect的安装路径 #!/usr/bin/expect -f #设置超时时间 set timeout 3 #私人密码 set password yourpassword #传递交互指令 spawn ssh root@ip #根据输出传递数据 expect { -re \u0026#34;password\u0026#34; {send \u0026#34;$password\\r\u0026#34;} -re \u0026#34;yes/no\u0026#34; {send \u0026#34;yes\\n\u0026#34;;exp_continue} # 有的时候输入几次密码来确认,exp_continue } #保持在远端 interact #expect eof 注意：若登陆后便退出远程终端，则写expect eof即可。\nchmod +x ./autologin.sh #使脚本具有执行权限\n执行./autologin.sh即可完成登录。\n","description":"使用SSH登录远程服务器机需要手动输入用户名、IP、密码非常麻烦，因此可以用expect编写脚本利用脚本自动登入。","id":2,"section":"posts","tags":["linux","ssh"],"title":"利用expect编写自动执行脚本","uri":"https://week8.fun/posts/linux/%E5%88%A9%E7%94%A8expect%E7%BC%96%E5%86%99%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/"},{"content":"1、创建php-fpm文件\nvim /etc/init.d/php-fpm 然后加入下面的脚本：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/bin/bash # # Startup script for the PHP-FPM server. # # chkconfig: 345 85 15 # description: PHP is an HTML-embedded scripting language # processname: php-fpm # config: /usr/local/php/etc/php.ini # Source function library. #用which php-fpm找到你文件的位置 PHP_PATH=/usr/local DESC=\u0026#34;php-fpm daemon\u0026#34; NAME=php-fpm # php-fpm路径 DAEMON=$PHP_PATH/php/sbin/$NAME # 配置文件路径 CONFIGFILE=$PHP_PATH/php/etc/php-fpm.conf # PID文件路径(在php-fpm.conf设置) PIDFILE=$PHP_PATH/php/var/run/$NAME.pid SCRIPTNAME=/etc/init.d/$NAME # Gracefully exit if the package has been removed. test -x $DAEMON || exit 0 rh_start() { $DAEMON -y $CONFIGFILE || echo -n \u0026#34; already running\u0026#34; } rh_stop() { kill -QUIT `cat $PIDFILE` || echo -n \u0026#34; not running\u0026#34; } rh_reload() { kill -HUP `cat $PIDFILE` || echo -n \u0026#34; can\u0026#39;t reload\u0026#34; } case \u0026#34;$1\u0026#34; in start) echo -n \u0026#34;Starting $DESC: $NAME\u0026#34; rh_start echo \u0026#34;.\u0026#34; ;; stop) echo -n \u0026#34;Stopping $DESC: $NAME\u0026#34; rh_stop echo \u0026#34;.\u0026#34; ;; reload) echo -n \u0026#34;Reloading $DESC configuration...\u0026#34; rh_reload echo \u0026#34;reloaded.\u0026#34; ;; restart) echo -n \u0026#34;Restarting $DESC: $NAME\u0026#34; rh_stop sleep 1 rh_start echo \u0026#34;.\u0026#34; ;; *) echo \u0026#34;Usage: $SCRIPTNAME {start|stop|restart|reload}\u0026#34; \u0026gt;\u0026amp;2 exit 3 ;; esac exit 0 保存并退出\n3、更改权限\nsudo chmod +x /etc/init.d/php-fpm 4、加入服务\nupdate-rc.d php-fpm defaults // 添加 update-rc.d ServiceName defaults // 删除 update-rc.d ServiceName remove 5、加入到开机启动项\n使用chkconfig 命令添加、删除和查看系统开机自启动服务\nchkconfig --list 显示开机可以自动启动的服务 chkconfig --add php-fpm 添加开机自动启动php-fpm服务 chkconfig php-fpm on 来设置开机启动 chkconfig --del php-fpm 删除开机自动启动php-fpm服务 Ubuntu下的sysv-rc-conf完美“替代”CentOS下的chkconfig\n6、php-fpm命令\nservice php-fpm start service php-fpm stop service php-fpm restart service php-fpm reload service php-fpm start /etc/init.d/php-fpm start /etc/init.d/php-fpm stop /etc/init.d/php-fpm restart /etc/init.d/php-fpm reload /etc/init.d/php-fpm start ","description":"Linux下设置php-fpm开机自动启动","id":3,"section":"posts","tags":["linux","php-fpm"],"title":"Linux下设置php-fpm开机自动启动","uri":"https://week8.fun/posts/linux/linux%E4%B8%8B%E8%AE%BE%E7%BD%AEphp-fpm%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8/"},{"content":"安装 sysv-rc-conf suod apt install sysv-rc-conf 执行 sysv-rc-conf命令 sysv-rc-conf 按空格选择 service 这一行表示运行级别\nLinux运行级别 在任何时候，Linux系统都跑在一个指定的运行级别上，并且在不同运行级别的程序和服务，所要完成的工作也不同。Linux系统可以在这些运行级别之间进行切换，以完成不同的工作。\n运行级别（Runlevel）是指Unix或者Linux等操作系统不同的运行模式，通常分为7等，从0到6。但如果必要的话也可以更多，例如，大多数linux操作系统，共有如下6个典型的运行级别：\nman runlevel 查看当前系统的运行级别 runlevel 切换运行级别 init [0123456Ss] 即在init命令后跟一个参数，此参数是要切换到的运行级的运行级代号，例如，用init 0命令关机，用init 6命令重新启动。\n","description":"Ubuntu下的sysv-rc-conf完美“替代”CentOS下的chkconfig","id":4,"section":"posts","tags":["linux","ubuntu"],"title":"Ubuntu下的sysv-rc-conf完美“替代”CentOS下的chkconfig","uri":"https://week8.fun/posts/linux/ubuntu%E4%B8%8B%E7%9A%84sysv-rc-conf%E5%AE%8C%E7%BE%8E%E6%9B%BF%E4%BB%A3centos%E4%B8%8B%E7%9A%84chkconfig/"},{"content":"编译安装php配置时，这里面开启了很多扩展。如果这时候忘了开启，以后还能加上吗？答案是可以的。以后只需要进入源码的ext目录，例如忘了zip，进入ext/zip，使用phpize工具，zip.so。\n进入目录 cd /usr/local/src/php-7.4.0/ext/zip 执行phpize 报错Cannot find autoconf. Please check your autoconf installation and the $PHP_AUTOCONF environment variable. Then, rerun this script.\n解决方法:\nsudo apt install autoconf -y 再次执行phpize 成功\nconfigure sudo ./configure --with-php-config=/usr/local/php/bin/php-config 编译安装 sudo make \u0026amp;\u0026amp; sudo make install 在php.ini加上扩展即可 extension=zip.so\n重启 php-fpm sudo service php-fpm restart php -m 完成。\n","description":"编译安装php配置时，这里面开启了很多扩展。如果这时候忘了开启，以后还能加上吗？答案是可以的","id":5,"section":"posts","tags":["linux","php"],"title":"无需重新编译安装PHP扩展的方法","uri":"https://week8.fun/posts/linux/%E6%97%A0%E9%9C%80%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85php%E6%89%A9%E5%B1%95%E7%9A%84%E6%96%B9%E6%B3%95/"},{"content":"在运行ubuntu的apt-get install命令时，经常遇到如下错误： 这个表示当前apt-get命令被占用，我们需要做的是杀死这些进程\n解决，使用ps 和 grep查找apt的pid,并使用kill杀死掉。 再次运行即可 完成、结束。\n","description":"E: Could not get lock /var/lib/dpkg/lock-frontend - open","id":6,"section":"posts","tags":["linux","Ubuntu"],"title":"E: Could not get lock /var/lib/dpkg/lock-frontend - open","uri":"https://week8.fun/posts/linux/%E8%A7%A3%E5%86%B3ubuntu%E7%9A%84apt-get%E5%91%BD%E4%BB%A4%E8%A2%AB%E5%8D%A0%E7%94%A8/"},{"content":"PHP的编译安装 官网下载 https://www.php.net/downloads.php\n以php-7.3.12.tar.bz2 (sig) 为例\n下载 cd /usr/local/src wget https://www.php.net/distributions/php-7.3.12.tar.bz2 解压 tar -xjvf php-7.4.0.tar.bz2 cd php-7.4.0 安装依赖 安装一些编译PHP所需要的依赖\nsudo apt update sudo apt install gcc sudo apt install make sudo apt install openssl sudo apt install curl sudo apt install libbz2-dev sudo apt install libxml2-dev sudo apt install libjpeg-dev sudo apt install libpng-dev sudo apt install libfreetype6-dev sudo apt install libzip-dev 配置PHP 查看以前编译php所使用的编译参数\nphp -i | grep configure\n./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --enable-fpm \u0026ndash;prefix 安装路径 \u0026ndash;with-config-file-path 配置文件路径\n编译并安装 编译\nmake 安装\nsudo make install 复制php.ini配置文件 php.ini放在--with-config-file-path地址\n1 sudo cp php.ini-development /usr/local/php/etc/php.ini #生成环境复制php.ini-production或者都复制php.ini-production 将 /usr/local/php/bin 添加到系统环境变量中，方便使用php和phpize等命令 vim /etc/profile #注：该配置对所有用户生效 在最后一行添加\nexport PATH=$PATH:/usr/local/php/bin 保存退出\nsource /etc/profile php -v 配置php-fpm 创建并设置php-fpm运行账号 1 2 3 4 groupadd www-data useradd -M -g www-data -s /sbin/nologin www-data 设置php-fpm 配置 cd /usr/local/php/etc sudo cp php-fpm.conf.default php-fpm.conf cd php-fpm.d/ sudo cp www.conf.default www.conf vim www.conf 搜索user设置运行账号：\nuser = www-data group = www-data 去掉;pid = run/php-fpm.pid前的分号\npid = run/php-fpm.pid 保存退出\nPHP-FPM启动脚本设置 Linux下设置php-fpm开机自动启动\n启动PHP-FPM sudo service php-fpm start 升级安装 PHP 至 7.4.0 备份配置文件 注意: 一定要备份好配置文件\nsudo mv /usr/local/php /usr/local/php-7.3.12 下载 cd /usr/local/src wget https://www.php.net/distributions/php-7.4.0.tar.bz2 解压 tar -xjvf php-7.4.0.tar.bz2 cd php-7.4.0 停止php-fpm sudo service php-fpm stop 配置PHP 查看以前编译php所使用的编译参数\nphp -i | grep configure\n./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --enable-fpm 编译并安装 编译\nsudo make 安装\nsudo make install 复制默认配置文件（从 /usr/local/php-7.3.12 目录拷贝就行） cp /usr/local/php-7.3.12/etc/php.ini /usr/local/php/etc/php.ini cp /usr/local/php-7.3.12/etc/php-fpm.conf /usr/local/php/etc/php-fpm.conf cp /usr/local/php-7.3.12/etc/php-fpm.d/www.conf /usr/local/php/etc/php-fpm.d/www.conf 启动php-fpm sudo service php-fpm start 完成。\n","description":"Linux 下PHP的编译安装与升级到PHP7.4","id":7,"section":"posts","tags":["linux","Ubuntu","PHP"],"title":"Linux 下PHP的编译安装与升级到PHP7.4","uri":"https://week8.fun/posts/linux/linux-%E4%B8%8Bphp%E7%9A%84%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%87%E7%BA%A7/"},{"content":"1、进入 /etc/apt\n2、 使用vim sources.list命令 在里面sources.list 添加镜像源 deb http://archive.ubuntu.com/ubuntu/ trusty main universe restricted multiverse\n3、然后 sudo apt-get update\n4、 sudo apt install sysv-rc-conf 接着安装就可以了\n","description":"ubuntu当使用命令sudo apt install sysv-rc-conf安装不上时，提示“ E: 无法定位软件包问题","id":8,"section":"posts","tags":["linux","ubuntu"],"title":"ubuntu当使用命令sudo apt install sysv-rc-conf安装不上时，提示“ E: 无法定位软件包问题","uri":"https://week8.fun/posts/linux/ubuntu%E5%BD%93%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4sudo-apt-install-sysv-rc-conf%E5%AE%89%E8%A3%85%E4%B8%8D%E4%B8%8A%E6%97%B6%E6%8F%90%E7%A4%BA-e-%E6%97%A0%E6%B3%95%E5%AE%9A%E4%BD%8D%E8%BD%AF%E4%BB%B6%E5%8C%85%E9%97%AE%E9%A2%98/"},{"content":"1、连接拒绝\n$ ssh jade@172.16.50.129 结果\nssh: connect to host 172.16.50.129 port 22: Connection refused 2、检查虚拟机的SSH服务是否开启\n$ ps -e | grep ssh 结果\n1419 ? 00:00:00 ssh-agent 只出现ssh-agent则没有开启ssh\n3、开启SSH服务\n$ sudo service ssh start 结果\nFailed to start ssh.service: Unit ssh.service not found. 没有ssh服务\n4、安装openssh-server\n$ sudo apt-get install openssh-server 安装完毕再次执行sudo service ssh start启动ssh服务\n5、开启成功\n6、再次连接虚拟机\n成功、结束。\n","description":"Mac下SSH连接本地虚拟机","id":9,"section":"posts","tags":["linux","Vmware","Ubuntu","ssh"],"title":"Mac下SSH连接本地虚拟机","uri":"https://week8.fun/posts/linux/mac%E4%B8%8Bssh%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"content":"使用Vmware虚拟机中，发现宿主机与虚拟机里面的内容无法互相复制粘贴。造成交互内容麻烦，尝试需要使用管理员权限打开虚拟机，这样就可以正常复制粘贴宿主机中的内容到虚拟机中了。\n在Vmware虚拟机中执行下列命令\n1 2 3 4 $ sudo apt-get autoremove open-vm-tools $ sudo apt-get install open-vm-tools-desktop $ reboot ","description":"使用Vmware虚拟机中，发现宿主机与虚拟机里面的内容无法互相复制粘贴。造成交互内容麻烦，尝试需要使用管理员权限打开虚拟机，这样就可以正常复制粘贴宿主机中的内容到虚拟机中了。","id":10,"section":"posts","tags":["linux","Vmware","Ubuntu"],"title":"实现VMware运行Ubuntu与宿主机互相复制粘贴","uri":"https://week8.fun/posts/linux/%E5%AE%9E%E7%8E%B0vmware%E8%BF%90%E8%A1%8Cubuntu%E4%B8%8E%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%BA%92%E7%9B%B8%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4/"},{"content":"tar -c: 建立压缩档案 -x：解压 -t：查看内容 -r：向压缩归档文件末尾追加文件 -u：更新原压缩包中的文件 这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。\n-z：有gzip属性的 -j：有bz2属性的 -Z：有compress属性的 -v：显示所有过程 -O：将文件解开到标准输出 下面的参数-f是必须的\n-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。 tar -cf all.tar *.jpg 这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。\ntar -rf all.tar *.gif 这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。\ntar -uf all.tar logo.gif 这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。\ntar -tf all.tar 这条命令是列出all.tar包中所有文件，-t是列出文件的意思\ntar -xf all.tar 这条命令是解出all.tar包中所有文件，-t是解开的意思\n压缩 tar -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg\ntar -czf jpg.tar.gz *.jpg//将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz\ntar -cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2\ntar -cZf jpg.tar.Z *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z\nrar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux\nzip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux\n解压 tar -xvf file.tar //解压 tar包\ntar -xzvf file.tar.gz //解压tar.gz\ntar -xjvf file.tar.bz2 //解压 tar.bz2\ntar -xZvf file.tar.Z //解压tar.Z\nunrar e file.rar //解压rar\nunzip file.zip //解压zip\n总结 1、*.tar 用 tar -xvf 解压\n2、*.gz 用 gzip -d或者gunzip 解压\n3、.tar.gz和.tgz 用 tar -xzf 解压\n4、*.bz2 用 bzip2 -d或者用bunzip2 解压\n5、*.tar.bz2用tar -xjf 解压\n6、*.Z 用 uncompress 解压\n7、*.tar.Z 用tar -xZf 解压\n8、*.rar 用 unrar e解压\n9、*.zip 用 unzip 解压\n","description":"Linux下的tar压缩解压缩命令详解","id":11,"section":"posts","tags":["linux"],"title":"Linux下的tar压缩解压缩命令详解","uri":"https://week8.fun/posts/linux/tar%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"},{"content":"Sample images from Pixabay\n","description":"cartoon gallery","id":12,"section":"","tags":null,"title":"Gallery","uri":"https://week8.fun/gallery/"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\nhttps://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","description":"Hugo, the world’s fastest framework for building websites","id":13,"section":"","tags":null,"title":"About","uri":"https://week8.fun/about/"},{"content":" Hello Hugo aaa bbb ccc ds 我来也\n","description":"","id":14,"section":"posts","tags":null,"title":"我来也","uri":"https://week8.fun/posts/%E6%88%91%E6%9D%A5%E4%B9%9F/"}]